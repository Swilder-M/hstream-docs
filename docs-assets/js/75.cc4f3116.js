(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{545:function(e,t,s){"use strict";s.r(t);var a=s(11),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"perform-stream-processing-by-sql"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#perform-stream-processing-by-sql"}},[e._v("#")]),e._v(" Perform Stream Processing by SQL")]),e._v(" "),s("p",[e._v("This part provides a demo on performing real-time stream processing by SQL. You can get first understand on basic concepts such as "),s("strong",[e._v("streams")]),e._v(", "),s("strong",[e._v("queries")]),e._v(" and "),s("strong",[e._v("materialized views")]),e._v(". It also shows some powerful features of our system, such as easy-to-use and low-lantency.")]),e._v(" "),s("h2",{attrs:{id:"overview"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),s("p",[e._v("One of the most important applications of stream processing is real-time bussiness information analisis. Imagine that we manage a supermarket and we want to analyze the selling information of products to adjust management strategies. To be brief, suppose we have two "),s("strong",[e._v("stream")]),e._v("s:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("info(product, category)      // represents the category a product belongs to\nvisit(product, user, length) // represents the length of time when a customer looks at a product\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("Unlike tables in traditional relational databases, a stream is an endless series of data which comes with time. Now we want to do some analisis on the two streams to get some useful information.")]),e._v(" "),s("h2",{attrs:{id:"prerequirements"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#prerequirements"}},[e._v("#")]),e._v(" Prerequirements")]),e._v(" "),s("p",[e._v("Ensure you have deployed the HStream system successfully. The most easiest way is at "),s("RouterLink",{attrs:{to:"/zh/latest/start/quickstart-with-docker.html"}},[e._v("quickstart")]),e._v(". Of course you can also try other methods mentioned in the Deployment part.")],1),e._v(" "),s("h2",{attrs:{id:"step-1-create-related-streams"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#step-1-create-related-streams"}},[e._v("#")]),e._v(" Step 1: Create related streams")]),e._v(" "),s("p",[e._v("In the overview part we have mentioned that we have two streams "),s("code",[e._v("info")]),e._v(" and "),s("code",[e._v("visit")]),e._v(". Now let's create them. Just open a CLI session and run the following statements:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("> CREATE STREAM info;\ninfo\n> CREATE STREAM visit;\nvisit\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("We have successfully created two streams.")]),e._v(" "),s("h2",{attrs:{id:"step-2-create-streaming-queries"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#step-2-create-streaming-queries"}},[e._v("#")]),e._v(" Step 2: Create streaming queries")]),e._v(" "),s("p",[e._v("Now we can create streaming "),s("strong",[e._v("queries")]),e._v(" on the streams. A query is a running task which fetch data from stream(s) and produce results continuously. Let's create a trivial query which fetches data from stream "),s("code",[e._v("info")]),e._v(" and outputs them identically:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("> SELECT * FROM info EMIT CHANGES;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("The query will start running until you interrupt it. Now just let it there and create another query. It fetches data from stream "),s("code",[e._v("visit")]),e._v(" and outputs the maximum length of time of each product. Open a new CLI session and run")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("> SELECT product, MAX(length) AS max_len FROM visit GROUP BY product EMIT CHANGES;\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("Both two queries output no result now because we have not inserted any data into the two streams. We will do it then.")]),e._v(" "),s("h2",{attrs:{id:"step-3-insert-data-into-streams"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#step-3-insert-data-into-streams"}},[e._v("#")]),e._v(" Step 3: Insert data into streams")]),e._v(" "),s("p",[e._v("To insert data into streams, we can use many methods such as interactive CLI, client libraries and connectors. You can refer to "),s("RouterLink",{attrs:{to:"/zh/latest/write.html"}},[e._v("guides")]),e._v(" for client usage and "),s("RouterLink",{attrs:{to:"/zh/latest/reference/sql/statements/create-connector.html"}},[e._v("connectors")]),e._v(" for connectors. Here we use CLI to insert data to streams.")],1),e._v(" "),s("p",[e._v("Open a new CLI session and run")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('> INSERT INTO info (product, category) VALUES ("Apple", "Fruit");\nDone.\n> INSERT INTO visit (product, user, length) VALUES ("Apple", "Alice", 10);\nDone.\n> INSERT INTO visit (product, user, length) VALUES ("Apple", "Bob", 20);\nDone.\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("p",[e._v("Now switch to CLI sessions of the queries, we can get outputs as expected:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('> SELECT * FROM info EMIT CHANGES;\n{"product":"Apple","category":"Fruit"}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('> SELECT product, MAX(length) AS max_len FROM visit GROUP BY product EMIT CHANGES;\n{"product":"Apple","max_len":10.0}\n{"product":"Apple","max_len":20.0}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("Note that "),s("code",[e._v("max_len")]),e._v(" changes from "),s("code",[e._v("10")]),e._v(" to "),s("code",[e._v("20")]),e._v(", which is expected.")]),e._v(" "),s("h2",{attrs:{id:"step-3-create-materialized-views"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#step-3-create-materialized-views"}},[e._v("#")]),e._v(" Step 3: Create materialized views")]),e._v(" "),s("p",[e._v("Now let's do some more complex analisis. We want to know the maximum length of visit time of each category "),s("strong",[e._v("at any time we need it")]),e._v(". The best way to solve the problem is by "),s("strong",[e._v("materialized views")]),e._v(".")]),e._v(" "),s("p",[e._v("A materialized view is a physical object which is continuously maintained in the memory. We can get the results directly from the view once we need it without any extra computation. Thus getting results from a view is very fast.")]),e._v(" "),s("p",[e._v("Here we can create a view like")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("> CREATE VIEW result AS SELECT info.category, MAX(visit.length) as max_length FROM info, visit WHERE info.product = visit.product GROUP BY info.category EMIT CHANGES;\nDone. Query ID: 1362152824401458\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("Note the query ID may be different. Now let's get something from the view:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("> SELECT * FROM result;\nDone.\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("We have got nothing! It is because we have not inserted any data into the streams "),s("strong",[e._v("after")]),e._v(" the view is created. Let's insert some data:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('> INSERT INTO info (product, category) VALUES ("Apple", "Fruit");\nDone.\n> INSERT INTO info (product, category) VALUES ("Banana", "Fruit");\nDone.\n> INSERT INTO info (product, category) VALUES ("Carrot", "Vegetable");\nDone.\n> INSERT INTO info (product, category) VALUES ("Potato", "Vegetable");\nDone.\n> INSERT INTO visit (product, user, length) VALUES ("Apple", "Alice", 10);\nDone.\n> INSERT INTO visit (product, user, length) VALUES ("Apple", "Bob", 20);\nDone.\n> INSERT INTO visit (product, user, length) VALUES ("Carrot", "Bob", 50);\nDone.\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br")])]),s("h2",{attrs:{id:"step-4-get-results-from-views"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#step-4-get-results-from-views"}},[e._v("#")]),e._v(" Step 4: Get results from views")]),e._v(" "),s("p",[e._v("Now let's find out what is in our view again:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('> SELECT * FROM result;\n{"max_length":20.0,"info.category":"Fruit"}\n{"max_length":50.0,"info.category":"Vegetable"}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("It is correct! Now insert more data and repeat the inspection:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('> INSERT INTO visit (product, user, length) VALUES ("Banana", "Alice", 40);\nDone.\n> INSERT INTO visit (product, user, length) VALUES ("Potato", "Eve", 60);\nDone.\n> SELECT * FROM result;\n{"max_length":40.0,"info.category":"Fruit"}\n{"max_length":60.0,"info.category":"Vegetable"}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("p",[e._v("The result is updated at once.")]),e._v(" "),s("h2",{attrs:{id:"related-pages"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#related-pages"}},[e._v("#")]),e._v(" Related Pages")]),e._v(" "),s("p",[e._v("For detailed introduction of the SQL, see "),s("RouterLink",{attrs:{to:"/zh/latest/reference/sql/sql-overview.html"}},[e._v("the reference")]),e._v(".")],1)])}),[],!1,null,null,null);t.default=n.exports}}]);