(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{504:function(a,e,t){"use strict";t.r(e);var r=t(11),s=Object(r.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"hstream-storage-hstore"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hstream-storage-hstore"}},[a._v("#")]),a._v(" HStream Storage (HStore)")]),a._v(" "),t("p",[a._v("HStream Storage (HStore), the core storage component of HStreamDB, is a low-latency\nstorage component explicitly designed for streaming data.\nIt can store large-scale real-time data in a distributed and persistent manner\nand seamlessly interface with large-capacity secondary storage such as S3 through\nthe Auto-Tiering mechanism to achieve unified storage of historical and real-time data.")]),a._v(" "),t("p",[a._v("The core storage model of HStore is a logging model that fits with streaming data.\nRegard data stream as an infinitely growing log, the typical operations supported\ninclude appending and reading by batches.\nAlso, since the data stream is immutable, it generally does not support update operations.")]),a._v(" "),t("h2",{attrs:{id:"hstream-storage-hstore-consists-of-following-layer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hstream-storage-hstore-consists-of-following-layer"}},[a._v("#")]),a._v(" HStream Storage (HStore) consists of following layer")]),a._v(" "),t("h3",{attrs:{id:"streaming-data-api-layer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#streaming-data-api-layer"}},[a._v("#")]),a._v(" Streaming Data API layer")]),a._v(" "),t("p",[a._v("This layer provides the core data stream management and read/write operations,\nincluding stream creation/deletion and writing to/consuming data in the stream.\nIn the design of HStore, data streams are not stored as actual streams.\nTherefore, the creation of a stream is a very light-weight operation.\nThere is no limit to the number of streams to be created in HStore.\nBesides, it supports concurrent writes to numerous data streams and still maintains a stable low latency.\nFor the characteristics of data streams, HStore provides append operation to support fast data writing.\nWhile reading from stream data, it gives a subscription-based operation\nand pushes any new data written to the stream to the data consumer in real time.")]),a._v(" "),t("h3",{attrs:{id:"replicator-layer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#replicator-layer"}},[a._v("#")]),a._v(" Replicator Layer")]),a._v(" "),t("p",[a._v("This layer implements the strongly consistent replication based on an optimized\nFlexible Paxos consensus mechanism,\nensuring the fault tolerance and high availability to data,\nand maximizes cluster availability through a non-deterministic data distribution policy.\nMoreover, it supports replication groups reconfiguration online to achieve seamless\ncluster data balancing and horizontal scaling.")]),a._v(" "),t("h3",{attrs:{id:"tier1-local-storage-layer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tier1-local-storage-layer"}},[a._v("#")]),a._v(" Tier1 Local Storage Layer")]),a._v(" "),t("p",[a._v("The layer fulfilled local persistent storage needs of data based on the optimized RocksDB storage engine,\nwhich encapsulates the access interface of streaming data\nand can support low-latency writing and reading a large amount of data.")]),a._v(" "),t("h3",{attrs:{id:"tier2-offloader-layer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tier2-offloader-layer"}},[a._v("#")]),a._v(" Tier2 Offloader Layer")]),a._v(" "),t("p",[a._v("This layer provides a unified interface encapsulation for various long-term storage systems,\nsuch as HDFS, AWS S3, etc.\nIt supports automatic offloading of historical data to these secondary storage systems\nand can also be accessed through a unified streaming data interface.")])])}),[],!1,null,null,null);e.default=s.exports}}]);