(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{574:function(e,t,a){"use strict";a.r(t);var s=a(11),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"sql-overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-overview"}},[e._v("#")]),e._v(" SQL Overview")]),e._v(" "),a("p",[e._v("SQL is a domain-specific language used in programming and designed for managing data held in a database management system. A standard for the specification of SQL is maintained by the American National Standards Institute (ANSI). Also, there are many variants and extensions to SQL to express more specific programs.")]),e._v(" "),a("p",[e._v("The "),a("a",{attrs:{href:"https://github.com/hstreamdb/hstream/blob/main/hstream-sql/etc/SQL.cf",target:"_blank",rel:"noopener noreferrer"}},[e._v("SQL grammar of HStreamDB"),a("OutboundLink")],1),e._v(" is based on a subset of SQL-92 with some extensions to support stream operations.")]),e._v(" "),a("h2",{attrs:{id:"syntax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[e._v("#")]),e._v(" Syntax")]),e._v(" "),a("p",[e._v("SQL inputs are made up of a series of statements. Each statement is made up of a series of tokens and ends in a semicolon ("),a("code",[e._v(";")]),e._v(").")]),e._v(" "),a("p",[e._v("A token can be a keyword argument, an identifier, a literal, an operator, or a special character. The details of the rules can be found in the "),a("a",{attrs:{href:"https://github.com/hstreamdb/hstream/blob/main/hstream-sql/etc/SQL.cf",target:"_blank",rel:"noopener noreferrer"}},[e._v("BNFC grammar file"),a("OutboundLink")],1),e._v(". Normally, tokens are separated by whitespace.")]),e._v(" "),a("p",[e._v("The following examples are syntactically valid SQL statements:")]),e._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("SELECT")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" my_stream"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("CREATE")]),e._v(" STREAM abnormal_weather "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("AS")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("SELECT")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" weather "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("WHERE")]),e._v(" temperature "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("30")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("AND")]),e._v(" humidity "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("80")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("WITH")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("REPLICATE "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("INSERT")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("INTO")]),e._v(" weather "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("cityId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" temperature"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" humidity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("VALUES")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("11254469")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("65")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("h2",{attrs:{id:"keywords"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keywords"}},[e._v("#")]),e._v(" Keywords")]),e._v(" "),a("p",[e._v("Some tokens such as "),a("code",[e._v("SELECT")]),e._v(", "),a("code",[e._v("INSERT")]),e._v(" and "),a("code",[e._v("WHERE")]),e._v(" are reserved "),a("em",[e._v("keywords")]),e._v(", which have specific meanings in SQL syntax. Keywords are case insensitive, which means that "),a("code",[e._v("SELECT")]),e._v(" and "),a("code",[e._v("select")]),e._v(" are equivalent. A keyword can not be used as an identifier.")]),e._v(" "),a("p",[e._v("For a complete list of keywords, see the "),a("RouterLink",{attrs:{to:"/zh/latest/reference/sql/appendix.html"}},[e._v("appendix")]),e._v(".")],1),e._v(" "),a("h2",{attrs:{id:"identifiers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#identifiers"}},[e._v("#")]),e._v(" Identifiers")]),e._v(" "),a("p",[e._v("Identifiers are tokens that represent user-defined objects such as streams, fields, and other ones. For example, "),a("code",[e._v("my_stream")]),e._v(" can be used as a stream name, and "),a("code",[e._v("temperature")]),e._v(" can represent a field in the stream.")]),e._v(" "),a("p",[e._v("By now, identifiers only support C-style naming rules. It means that an identifier name can only have letters (both uppercase and lowercase letters), digits, and the underscore. Besides, the first letter of an identifier should be either a letter or an underscore.")]),e._v(" "),a("p",[e._v("By now, identifiers are case sensitive, which means that "),a("code",[e._v("my_stream")]),e._v(" and "),a("code",[e._v("MY_STREAM")]),e._v(" are different identifiers.")]),e._v(" "),a("h2",{attrs:{id:"literals-constants"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#literals-constants"}},[e._v("#")]),e._v(" Literals (Constants)")]),e._v(" "),a("p",[e._v("Literals are objects with known values before being executed. There are six types of constants: integers, floats, strings, dates, time, and intervals so far.")]),e._v(" "),a("h3",{attrs:{id:"integers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#integers"}},[e._v("#")]),e._v(" Integers")]),e._v(" "),a("p",[e._v("Integers are in the form of "),a("code",[e._v("digits")]),e._v(", where "),a("code",[e._v("digits")]),e._v(" are one or more single-digit integers (0 through 9). Negatives such as "),a("code",[e._v("-1")]),e._v(" are also supported. "),a("strong",[e._v("Note that scientific notation is not supported yet")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"floats"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#floats"}},[e._v("#")]),e._v(" Floats")]),e._v(" "),a("p",[e._v("Floats are in the form of "),a("code",[e._v("digits . digits")]),e._v(". Negative floats such as "),a("code",[e._v("-11.514")]),e._v(" are supported.\nNote that")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("scientific notation is not supported yet")]),e._v(".")]),e._v(" "),a("li",[a("strong",[e._v("Forms such as "),a("code",[e._v("1.")]),e._v(" and "),a("code",[e._v(".99")]),e._v(" are not supported yet")]),e._v(".")])]),e._v(" "),a("h3",{attrs:{id:"strings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#strings"}},[e._v("#")]),e._v(" Strings")]),e._v(" "),a("p",[e._v("Strings are arbitrary character series surrounded by double quotes ("),a("code",[e._v('"')]),e._v("), such as "),a("code",[e._v('"JSON"')]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"dates"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dates"}},[e._v("#")]),e._v(" Dates")]),e._v(" "),a("p",[e._v("Dates represent a date exact to a day in the form of "),a("code",[e._v("DATE <year>-<month>-<day>")]),e._v(", where "),a("code",[e._v("<year>")]),e._v(", "),a("code",[e._v("<month>")]),e._v(" and "),a("code",[e._v("<day>")]),e._v(" are all integer constants. Note that the leading "),a("code",[e._v("DATE")]),e._v(" should not be omitted.")]),e._v(" "),a("p",[e._v("Example: "),a("code",[e._v("DATE 2021-01-02")])]),e._v(" "),a("h3",{attrs:{id:"time"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#time"}},[e._v("#")]),e._v(" Time")]),e._v(" "),a("p",[e._v("Time constants represent time exact to a second in the form of "),a("code",[e._v("TIME <hour>-<minute>-<second>")]),e._v(", where "),a("code",[e._v("<hour>")]),e._v(", "),a("code",[e._v("<minute>")]),e._v(" and "),a("code",[e._v("<second>")]),e._v(" are all integer constants. Note that the leading "),a("code",[e._v("TIME")]),e._v(" should not be omitted.")]),e._v(" "),a("p",[e._v("Example: "),a("code",[e._v("TIME 11:45:14")])]),e._v(" "),a("h3",{attrs:{id:"intervals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#intervals"}},[e._v("#")]),e._v(" Intervals")]),e._v(" "),a("p",[e._v("Intervals represent a time section in the form of "),a("code",[e._v("INTERVAL <num> <time_unit>")]),e._v(", where "),a("code",[e._v("<num>")]),e._v(" is an integer constant and "),a("code",[e._v("<time_unit>")]),e._v(" is one of "),a("code",[e._v("YEAR")]),e._v(", "),a("code",[e._v("MONTH")]),e._v(", "),a("code",[e._v("WEEK")]),e._v(", "),a("code",[e._v("DAY")]),e._v(", "),a("code",[e._v("MINUTE")]),e._v(" and "),a("code",[e._v("SECOND")]),e._v(". Note that the leading "),a("code",[e._v("INTERVAL")]),e._v(" should not be omitted.")]),e._v(" "),a("p",[e._v("Example: "),a("code",[e._v("INTERVAL 5 SECOND")])]),e._v(" "),a("h2",{attrs:{id:"operators-and-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#operators-and-functions"}},[e._v("#")]),e._v(" Operators and Functions")]),e._v(" "),a("p",[e._v("Functions are special keywords that mean some computation, such as "),a("code",[e._v("SUM")]),e._v(" and "),a("code",[e._v("MIN")]),e._v(". And operators are infix functions composed of special characters, such as "),a("code",[e._v(">=")]),e._v(" and "),a("code",[e._v("<>")]),e._v(".")]),e._v(" "),a("p",[e._v("For a complete list of functions and operators, see the "),a("RouterLink",{attrs:{to:"/zh/latest/reference/sql/appendix.html"}},[e._v("appendix")]),e._v(".")],1),e._v(" "),a("h2",{attrs:{id:"special-characters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#special-characters"}},[e._v("#")]),e._v(" Special Characters")]),e._v(" "),a("p",[e._v("There are some special characters in the SQL syntax with particular meanings:")]),e._v(" "),a("ul",[a("li",[e._v("Parentheses ("),a("code",[e._v("()")]),e._v(") are used outside an expression for controlling the order of evaluation or specifying a function application.")]),e._v(" "),a("li",[e._v("Brackets ("),a("code",[e._v("[]")]),e._v(") are used with maps and arrays for accessing their substructures, such as "),a("code",[e._v("some_map[temp]")]),e._v(" and "),a("code",[e._v("some_array[1]")]),e._v(". "),a("strong",[e._v("Note that it is not supported yet")]),e._v(".")]),e._v(" "),a("li",[e._v("Commas ("),a("code",[e._v(",")]),e._v(") are used for delineating a list of objects.")]),e._v(" "),a("li",[e._v("The semicolons ("),a("code",[e._v(";")]),e._v(") represent the end of a SQL statement.")]),e._v(" "),a("li",[e._v("The asterisk ("),a("code",[e._v("*")]),e._v(') represents "all fields", such as '),a("code",[e._v("SELECT * FROM my_stream;")]),e._v(".")]),e._v(" "),a("li",[e._v("The period ("),a("code",[e._v(".")]),e._v(") is used for accessing a field in a stream, such as "),a("code",[e._v("my_stream.humidity")]),e._v(".")]),e._v(" "),a("li",[e._v("The back quote ("),a("code",[e._v("`")]),e._v(') represents an "raw column name" in the '),a("code",[e._v("SELECT")]),e._v(" clause to distinguish a column name with functions from actual function applications. For example, "),a("code",[e._v("SELECT SUM(a) FROM s EMIT CHANGES;")]),e._v(" means applying "),a("code",[e._v("SSUM")]),e._v(" function on the column "),a("code",[e._v("a")]),e._v(" from stream "),a("code",[e._v("s")]),e._v(". However if the stream "),a("code",[e._v("s")]),e._v(" actually contains a column called "),a("code",[e._v("SUM(a)")]),e._v(" and you want to take it out, you can use back quotes like "),a("code",[e._v("SELECT `SUM(a)` FROM s EMIT CHANGES;")]),e._v(".")])]),e._v(" "),a("h2",{attrs:{id:"comments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comments"}},[e._v("#")]),e._v(" Comments")]),e._v(" "),a("p",[e._v("A single-line comment begins with "),a("code",[e._v("//")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// This is a comment\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("Also, C-style multi-line comments are supported:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("/* This is another\n   comment\n*/\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])])])}),[],!1,null,null,null);t.default=r.exports}}]);