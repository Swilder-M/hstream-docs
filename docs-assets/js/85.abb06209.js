(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{555:function(t,v,e){"use strict";e.r(v);var _=e(11),d=Object(_.a)({},(function(){var t=this,v=t.$createElement,e=t._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"appendix"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#appendix"}},[t._v("#")]),t._v(" Appendix")]),t._v(" "),e("h2",{attrs:{id:"data-types"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#data-types"}},[t._v("#")]),t._v(" Data Types")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("type")]),t._v(" "),e("th",[t._v("examples")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("Integer")]),t._v(" "),e("td",[t._v("1, -1, 1234567")])]),t._v(" "),e("tr",[e("td",[t._v("Double")]),t._v(" "),e("td",[t._v("2.3, -3.56, 232.4")])]),t._v(" "),e("tr",[e("td",[t._v("Bool")]),t._v(" "),e("td",[t._v("TRUE, FALSE")])]),t._v(" "),e("tr",[e("td",[t._v("Date")]),t._v(" "),e("td",[t._v("2020-06-10")])]),t._v(" "),e("tr",[e("td",[t._v("Time")]),t._v(" "),e("td",[t._v("11:18:30")])]),t._v(" "),e("tr",[e("td",[t._v("String")]),t._v(" "),e("td",[t._v('"HStreamDB"')])]),t._v(" "),e("tr",[e("td",[t._v("Null")]),t._v(" "),e("td",[t._v("NULL")])])])]),t._v(" "),e("h2",{attrs:{id:"keywords"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#keywords"}},[t._v("#")]),t._v(" Keywords")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("keyword")]),t._v(" "),e("th",[t._v("description")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("ABS")])]),t._v(" "),e("td",[t._v("absolute value")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ACOS")])]),t._v(" "),e("td",[t._v("arccosine")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ACOSH")])]),t._v(" "),e("td",[t._v("inverse hyperbolic cosine")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("AND")])]),t._v(" "),e("td",[t._v("logical and operator")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ARRAY_CONTAIN")])]),t._v(" "),e("td",[t._v("given an array, checks if a search value is contained in the array")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ARRAY_DISTINCT")])]),t._v(" "),e("td",[t._v("returns an array of all the distinct values")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ARRAY_EXCEPT")])]),t._v(" "),e("td",[e("code",[t._v("ARRAY_DISTINCT")]),t._v(" except for those also present in the second array")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ARRAY_INTERSECT")])]),t._v(" "),e("td",[t._v("returns an array of all the distinct elements from the intersection of both input arrays")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ARRAY_JOIN")])]),t._v(" "),e("td",[t._v("creates a flat string representation of all elements contained in the given array")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ARRAY_LENGTH")])]),t._v(" "),e("td",[t._v("return the length of the given array")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ARRAY_MAX")])]),t._v(" "),e("td",[t._v("returns the maximum value from the given array of primitive elements")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ARRAY_MIN")])]),t._v(" "),e("td",[t._v("returns the minimum value from the given array of primitive elements")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ARRAY_REMOVE")])]),t._v(" "),e("td",[t._v("removes all elements from the input array equal to the second argument")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ARRAY_SORT")])]),t._v(" "),e("td",[t._v("sort the given array")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ARRAY_UNION")])]),t._v(" "),e("td",[t._v("returns an array of all the distinct elements from the union of both input arrays")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("AS")])]),t._v(" "),e("td",[t._v("stream or field name alias")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ASIN")])]),t._v(" "),e("td",[t._v("arcsine")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ASINH")])]),t._v(" "),e("td",[t._v("inverse hyperbolic sine")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ATAN")])]),t._v(" "),e("td",[t._v("arctangent")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ATANH")])]),t._v(" "),e("td",[t._v("inverse hyperbolic tangent")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("AVG")])]),t._v(" "),e("td",[t._v("average function")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("BETWEEN")])]),t._v(" "),e("td",[t._v("range operator, used with "),e("code",[t._v("AND")])])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("BY")])]),t._v(" "),e("td",[t._v("do something by certain conditions, used with "),e("code",[t._v("GROUP")]),t._v(" or "),e("code",[t._v("ORDER")])])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("CEIL")])]),t._v(" "),e("td",[t._v("rounds a number UPWARDS to the nearest integer")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("COS")])]),t._v(" "),e("td",[t._v("cosine")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("COSH")])]),t._v(" "),e("td",[t._v("hyperbolic cosine")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("COUNT")])]),t._v(" "),e("td",[t._v("count function")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("CREATE")])]),t._v(" "),e("td",[t._v("create a stream / connector")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("DATE")])]),t._v(" "),e("td",[t._v("prefix of date constant")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("DAY")])]),t._v(" "),e("td",[t._v("interval unit")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("DROP")])]),t._v(" "),e("td",[t._v("drop a stream")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("EXP")])]),t._v(" "),e("td",[t._v("exponent")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("FLOOR")])]),t._v(" "),e("td",[t._v("rounds a number DOWNWARDS to the nearest integer")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("FROM")])]),t._v(" "),e("td",[t._v("specify where to select data from")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("GROUP")])]),t._v(" "),e("td",[t._v("group values by certain conditions, used with "),e("code",[t._v("BY")])])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("HAVING")])]),t._v(" "),e("td",[t._v("filter select values by a condition")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("HOPPING")])]),t._v(" "),e("td",[t._v("hopping window")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("IFNULL")])]),t._v(" "),e("td",[t._v("if the first argument is "),e("code",[t._v("NULL")]),t._v(" returns the second, else the first")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("INSERT")])]),t._v(" "),e("td",[t._v("insert data into a stream, used with "),e("code",[t._v("INTO")])])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("INTERVAL")])]),t._v(" "),e("td",[t._v("prefix of interval constant")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("INTO")])]),t._v(" "),e("td",[t._v("insert data into a stream, used with "),e("code",[t._v("INSERT")])])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("IS_ARRAY")])]),t._v(" "),e("td",[t._v("to determine if the given value is an array of values")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("IS_BOOL")])]),t._v(" "),e("td",[t._v("to determine if the given value is a boolean")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("IS_DATE")])]),t._v(" "),e("td",[t._v("to determine if the given value is a date value")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("IS_FLOAT")])]),t._v(" "),e("td",[t._v("to determine if the given value is a float")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("IS_INT")])]),t._v(" "),e("td",[t._v("to determine if the given value is an integer")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("IS_MAP")])]),t._v(" "),e("td",[t._v("to determine if the given value is a map of values")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("IS_NUM")])]),t._v(" "),e("td",[t._v("to determine if the given value is a number")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("IS_STR")])]),t._v(" "),e("td",[t._v("to determine if the given value is a string")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("IS_TIME")])]),t._v(" "),e("td",[t._v("to determine if the given value is a time value")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("JOIN")])]),t._v(" "),e("td",[t._v("for joining two streams")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("LEFT")])]),t._v(" "),e("td",[t._v("joining type, used with "),e("code",[t._v("JOIN")])])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("LEFT_TRIM")])]),t._v(" "),e("td",[t._v("trim spaces from the left end of a string")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("LOG")])]),t._v(" "),e("td",[t._v("logarithm with base e")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("LOG10")])]),t._v(" "),e("td",[t._v("logarithm with base 10")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("LOG2")])]),t._v(" "),e("td",[t._v("logarithm with base 2")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("MAX")])]),t._v(" "),e("td",[t._v("maximum function")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("MIN")])]),t._v(" "),e("td",[t._v("minimum function")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("MINUTE")])]),t._v(" "),e("td",[t._v("interval unit")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("MONTH")])]),t._v(" "),e("td",[t._v("interval unit")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("NOT")])]),t._v(" "),e("td",[t._v("logical not operator")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("NULLIF")])]),t._v(" "),e("td",[t._v("returns "),e("code",[t._v("NULL")]),t._v(" if the first argument is equal to the second, otherwise the first")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("OR")])]),t._v(" "),e("td",[t._v("logical or operator")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ORDER")])]),t._v(" "),e("td",[t._v("sort values by certain conditions, used with "),e("code",[t._v("BY")])])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("OUTER")])]),t._v(" "),e("td",[t._v("joining type, used with "),e("code",[t._v("JOIN")])])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("REVERSE")])]),t._v(" "),e("td",[t._v("reverse a string")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("RIGHT_TRIM")])]),t._v(" "),e("td",[t._v("trim spaces from the right end of a string")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ROUND")])]),t._v(" "),e("td",[t._v("rounds a number to the nearest integer")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("SECOND")])]),t._v(" "),e("td",[t._v("interval unit")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("SELECT")])]),t._v(" "),e("td",[t._v("query a stream")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("SHOW")])]),t._v(" "),e("td",[t._v("show something to stdout")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("SIGN")])]),t._v(" "),e("td",[t._v("return the sign of a numeric value as an INTEGER")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("SIN")])]),t._v(" "),e("td",[t._v("sine")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("SINH")])]),t._v(" "),e("td",[t._v("hyperbolic sine")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("SLIDING")])]),t._v(" "),e("td",[t._v("sliding window")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("SQRT")])]),t._v(" "),e("td",[t._v("square root")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("STREAM")])]),t._v(" "),e("td",[t._v("specify a stream, used with "),e("code",[t._v("CREATE")])])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("STRLEN")])]),t._v(" "),e("td",[t._v("get the length of a string")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("SUM")])]),t._v(" "),e("td",[t._v("sum function")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("TAN")])]),t._v(" "),e("td",[t._v("tangent")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("TANH")])]),t._v(" "),e("td",[t._v("hyperbolic tangent")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("TIME")])]),t._v(" "),e("td",[t._v("prefix of the time constant")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("TO_LOWER")])]),t._v(" "),e("td",[t._v("convert a string to lowercase")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("TO_STR")])]),t._v(" "),e("td",[t._v("convert a value to string")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("TO_UPPER")])]),t._v(" "),e("td",[t._v("convert a string to uppercase")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("TRIM")])]),t._v(" "),e("td",[t._v("trim spaces from both ends of a string")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("TUMBLING")])]),t._v(" "),e("td",[t._v("tumbling window")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("VALUES")])]),t._v(" "),e("td",[t._v("specify inserted data, used with "),e("code",[t._v("INSERT INTO")])])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("WEEK")])]),t._v(" "),e("td",[t._v("interval unit")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("WHERE")])]),t._v(" "),e("td",[t._v("filter selected values by a condition")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("WITH")])]),t._v(" "),e("td",[t._v("specify properties when creating a stream")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("WITHIN")])]),t._v(" "),e("td",[t._v("specify time window when joining two streams")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("YEAR")])]),t._v(" "),e("td",[t._v("interval unit")])])])]),t._v(" "),e("h2",{attrs:{id:"operators"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#operators"}},[t._v("#")]),t._v(" Operators")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("operator")]),t._v(" "),e("th",[t._v("description")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("=")])]),t._v(" "),e("td",[t._v("equal to")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("<>")])]),t._v(" "),e("td",[t._v("not equal to")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("<")])]),t._v(" "),e("td",[t._v("less than")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v(">")])]),t._v(" "),e("td",[t._v("greater than")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("<=")])]),t._v(" "),e("td",[t._v("less than or equal to")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v(">=")])]),t._v(" "),e("td",[t._v("greater than or equal to")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("+")])]),t._v(" "),e("td",[t._v("addition")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("-")])]),t._v(" "),e("td",[t._v("subtraction")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("*")])]),t._v(" "),e("td",[t._v("multiplication")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v(".")])]),t._v(" "),e("td",[t._v("access field of a stream")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("[]")])]),t._v(" "),e("td",[t._v("access item of a map or an array")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("AND")])]),t._v(" "),e("td",[t._v("logical and operator")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("OR")])]),t._v(" "),e("td",[t._v("logical or operator")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("NOT")])]),t._v(" "),e("td",[t._v("logical not operator")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("BETWEEN")])]),t._v(" "),e("td",[t._v("range operator")])])])]),t._v(" "),e("h2",{attrs:{id:"scalar-functions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#scalar-functions"}},[t._v("#")]),t._v(" Scalar Functions")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("function")]),t._v(" "),e("th",[t._v("description")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("ABS")])]),t._v(" "),e("td",[t._v("absolute value")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ACOS")])]),t._v(" "),e("td",[t._v("arccosine")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ACOSH")])]),t._v(" "),e("td",[t._v("inverse hyperbolic cosine")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ARRAY_CONTAIN")])]),t._v(" "),e("td",[t._v("given an array, checks if a search value is contained in the array")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ARRAY_DISTINCT")])]),t._v(" "),e("td",[t._v("returns an array of all the distinct values")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ARRAY_EXCEPT")])]),t._v(" "),e("td",[e("code",[t._v("ARRAY_DISTINCT")]),t._v(" except for those also present in the second array")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ARRAY_INTERSECT")])]),t._v(" "),e("td",[t._v("returns an array of all the distinct elements from the intersection of both input arrays")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ARRAY_JOIN")])]),t._v(" "),e("td",[t._v("creates a flat string representation of all elements contained in the given array")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ARRAY_LENGTH")])]),t._v(" "),e("td",[t._v("return the length of the given array")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ARRAY_MAX")])]),t._v(" "),e("td",[t._v("returns the maximum value from the given array of primitive elements")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ARRAY_MIN")])]),t._v(" "),e("td",[t._v("returns the minimum value from the given array of primitive elements")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ARRAY_REMOVE")])]),t._v(" "),e("td",[t._v("removes all elements from the input array equal to the second argument")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ARRAY_SORT")])]),t._v(" "),e("td",[t._v("sort the given array")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ARRAY_UNION")])]),t._v(" "),e("td",[t._v("returns an array of all the distinct elements from the union of both input arrays")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ASIN")])]),t._v(" "),e("td",[t._v("arcsine")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ASINH")])]),t._v(" "),e("td",[t._v("inverse hyperbolic sine")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ATAN")])]),t._v(" "),e("td",[t._v("arctangent")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ATANH")])]),t._v(" "),e("td",[t._v("inverse hyperbolic tangent")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("CEIL")])]),t._v(" "),e("td",[t._v("rounds a number UPWARDS to the nearest integer")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("COS")])]),t._v(" "),e("td",[t._v("cosine")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("COSH")])]),t._v(" "),e("td",[t._v("hyperbolic cosine")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("EXP")])]),t._v(" "),e("td",[t._v("exponent")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("FLOOR")])]),t._v(" "),e("td",[t._v("rounds a number DOWNWARDS to the nearest integer")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("IFNULL")])]),t._v(" "),e("td",[t._v("if the first argument is "),e("code",[t._v("NULL")]),t._v(" returns the second, else the first")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("NULLIF")])]),t._v(" "),e("td",[t._v("returns "),e("code",[t._v("NULL")]),t._v(" if the first argument is equal to the second, otherwise the first")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("IS_ARRAY")])]),t._v(" "),e("td",[t._v("to determine if the given value is an array of values")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("IS_BOOL")])]),t._v(" "),e("td",[t._v("to determine if the given value is a boolean")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("IS_DATE")])]),t._v(" "),e("td",[t._v("to determine if the given value is a date value")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("IS_FLOAT")])]),t._v(" "),e("td",[t._v("to determine if the given value is a float")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("IS_INT")])]),t._v(" "),e("td",[t._v("to determine if the given value is an integer")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("IS_MAP")])]),t._v(" "),e("td",[t._v("to determine if the given value is a map of values")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("IS_NUM")])]),t._v(" "),e("td",[t._v("to determine if the given value is a number")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("IS_STR")])]),t._v(" "),e("td",[t._v("to determine if the given value is a string")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("IS_TIME")])]),t._v(" "),e("td",[t._v("to determine if the given value is a time value")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("LEFT_TRIM")])]),t._v(" "),e("td",[t._v("trim spaces from the left end of a string")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("LOG")])]),t._v(" "),e("td",[t._v("logarithm with base e")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("LOG10")])]),t._v(" "),e("td",[t._v("logarithm with base 10")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("LOG2")])]),t._v(" "),e("td",[t._v("logarithm with base 2")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("REVERSE")])]),t._v(" "),e("td",[t._v("reverse a string")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("RIGHT_TRIM")])]),t._v(" "),e("td",[t._v("trim spaces from the right end of a string")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("ROUND")])]),t._v(" "),e("td",[t._v("rounds a number to the nearest integer")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("SIGN")])]),t._v(" "),e("td",[t._v("return the sign of a numeric value as an INTEGER")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("SIN")])]),t._v(" "),e("td",[t._v("sine")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("SINH")])]),t._v(" "),e("td",[t._v("hyperbolic sine")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("SQRT")])]),t._v(" "),e("td",[t._v("square root")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("STRLEN")])]),t._v(" "),e("td",[t._v("get the length of a string")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("TAN")])]),t._v(" "),e("td",[t._v("tangent")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("TANH")])]),t._v(" "),e("td",[t._v("hyperbolic tangent")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("TO_LOWER")])]),t._v(" "),e("td",[t._v("convert a string to lowercase")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("TO_STR")])]),t._v(" "),e("td",[t._v("convert a value to string")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("TO_UPPER")])]),t._v(" "),e("td",[t._v("convert a string to uppercase")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("TRIM")])]),t._v(" "),e("td",[t._v("trim spaces from both ends of a string")])])])]),t._v(" "),e("h2",{attrs:{id:"aggregate-functions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#aggregate-functions"}},[t._v("#")]),t._v(" Aggregate Functions")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("function")]),t._v(" "),e("th",[t._v("description")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("AVG")])]),t._v(" "),e("td",[t._v("average")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("COUNT")])]),t._v(" "),e("td",[t._v("count")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("MAX")])]),t._v(" "),e("td",[t._v("maximum")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("MIN")])]),t._v(" "),e("td",[t._v("minimum")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("SUM")])]),t._v(" "),e("td",[t._v("sum")])])])])])}),[],!1,null,null,null);v.default=d.exports}}]);